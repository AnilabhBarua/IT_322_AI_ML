import numpy as np

class NeuralNetwork:
    def __init__(self, alpha=0.1):
        self.alpha = alpha
        self.W1 = np.random.randn(2, 2)  # Input to hidden
        self.W2 = np.random.randn(2, 1)  # Hidden to output

    def sigmoid(self, x, deriv=False):
        if deriv:
            return x * (1 - x)
        return 1 / (1 + np.exp(-x))

    def forward(self, X):
        self.z1 = np.dot(X, self.W1)
        self.a1 = self.sigmoid(self.z1)
        self.z2 = np.dot(self.a1, self.W2)
        return self.sigmoid(self.z2)

    def backward(self, X, y, output):
        # Output layer error
        error2 = (output - y)
        delta2 = error2 * self.sigmoid(output, deriv=True)

        # Hidden layer error
        error1 = delta2.dot(self.W2.T)
        delta1 = error1 * self.sigmoid(self.a1, deriv=True)

        # Weight updates
        self.W2 -= self.alpha * self.a1.T.dot(delta2)
        self.W1 -= self.alpha * X.T.dot(delta1)

    def train(self, X, y, epochs=1000):
        for _ in range(epochs):
            output = self.forward(X)
            self.backward(X, y, output)

# XOR dataset
X = np.array([[0,0], [0,1], [1,0], [1,1]])
y = np.array([[0], [1], [1], [0]])

# Train network
nn = NeuralNetwork(alpha=0.5)
nn.train(X, y)

# Test predictions
print(nn.forward(X))



# NAND dataset
X = np.array([[0,0], [0,1], [1,0], [1,1]])
y = np.array([[1], [1], [1], [0]])  # NAND truth table

nn = NeuralNetwork(alpha=0.5)
nn.train(X, y)
print("NAND predictions:")
print(np.round(nn.forward(X), 2))

# NOR dataset
X = np.array([[0,0], [0,1], [1,0], [1,1]])
y = np.array([[1], [0], [0], [0]])  # NOR truth table

nn = NeuralNetwork(alpha=0.5)
nn.train(X, y)
print("NOR predictions:")
print(np.round(nn.forward(X), 2))

# AND dataset
X = np.array([[0,0], [0,1], [1,0], [1,1]])
y = np.array([[0], [0], [0], [1]])  # AND truth table

nn = NeuralNetwork(alpha=0.5)
nn.train(X, y)
print("AND predictions:")
print(np.round(nn.forward(X), 2))

# OR dataset
X = np.array([[0,0], [0,1], [1,0], [1,1]])
y = np.array([[0], [1], [1], [1]])  # OR truth table

nn = NeuralNetwork(alpha=0.5)
nn.train(X, y)
print("OR predictions:")
print(np.round(nn.forward(X), 2))



import numpy as np

class DeepNeuralNetwork:
    def __init__(self, alpha=0.1):
        self.alpha = alpha
        # Initialize weights for 2 hidden layers
        self.W1 = np.random.randn(2, 4)   # Input to Hidden Layer 1 (2 -> 4 neurons)
        self.W2 = np.random.randn(4, 3)   # Hidden Layer 1 to Hidden Layer 2 (4 -> 3)
        self.W3 = np.random.randn(3, 1)   # Hidden Layer 2 to Output (3 -> 1)

    def sigmoid(self, x, deriv=False):
        if deriv:
            return x * (1 - x)
        return 1 / (1 + np.exp(-x))

    def forward(self, X):
        self.z1 = np.dot(X, self.W1)
        self.a1 = self.sigmoid(self.z1)

        self.z2 = np.dot(self.a1, self.W2)
        self.a2 = self.sigmoid(self.z2)

        self.z3 = np.dot(self.a2, self.W3)
        self.output = self.sigmoid(self.z3)
        return self.output

    def backward(self, X, y, output):
        error3 = output - y
        delta3 = error3 * self.sigmoid(output, deriv=True)

        error2 = delta3.dot(self.W3.T)
        delta2 = error2 * self.sigmoid(self.a2, deriv=True)

        error1 = delta2.dot(self.W2.T)
        delta1 = error1 * self.sigmoid(self.a1, deriv=True)

        # Update weights
        self.W3 -= self.alpha * self.a2.T.dot(delta3)
        self.W2 -= self.alpha * self.a1.T.dot(delta2)
        self.W1 -= self.alpha * X.T.dot(delta1)

    def train(self, X, y, epochs=10000):
        for _ in range(epochs):
            output = self.forward(X)
            self.backward(X, y, output)

# Example: Training for AND gate
X = np.array([[0,0], [0,1], [1,0], [1,1]])
y = np.array([[0], [0], [0], [1]])

nn = DeepNeuralNetwork(alpha=0.5)
nn.train(X, y)
print("Predictions:")
print(np.round(nn.forward(X), 2))

X = np.array([[0,0], [0,1], [1,0], [1,1]])
y = np.array([[0], [1], [1], [0]])

# Train network
nn = DeepNeuralNetwork(alpha=0.5)
nn.train(X, y)

# Test predictions
print(nn.forward(X))

# NAND dataset
X = np.array([[0,0], [0,1], [1,0], [1,1]])
y = np.array([[1], [1], [1], [0]])  # NAND truth table

nn = DeepNeuralNetwork(alpha=0.5)
nn.train(X, y)
print("NAND predictions:")
print(np.round(nn.forward(X), 2))

# NOR dataset
X = np.array([[0,0], [0,1], [1,0], [1,1]])
y = np.array([[1], [0], [0], [0]])  # NOR truth table

nn = DeepNeuralNetwork(alpha=0.5)
nn.train(X, y)
print("NOR predictions:")
print(np.round(nn.forward(X), 2))

# OR dataset
X = np.array([[0,0], [0,1], [1,0], [1,1]])
y = np.array([[0], [1], [1], [1]])  # OR truth table

nn = DeepNeuralNetwork(alpha=0.5)
nn.train(X, y)
print("OR predictions:")
print(np.round(nn.forward(X), 2))